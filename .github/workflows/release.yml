name: release

on:
  push:
    branches: [main, master]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
        fetch-tags: true  # Ensure all tags are fetched for version resolution
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Detect version and tag
      id: version
      run: |
        echo "üîç Checking for version tags in this push to main/master..."
        
        # Check if this push contains a commit with "Version" in the message
        # This indicates a release was created locally and pushed
        if git log --oneline -1 --grep="Version" | grep -q "Version"; then
          # Get the latest tag that exists on this branch
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            VERSION=${LATEST_TAG#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "‚úÖ New version tag detected in this push: $LATEST_TAG"
          else
            echo "‚ö†Ô∏è Version commit found but no tag detected"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          echo "‚ö†Ô∏è No version commit found in this push"
          echo "should_release=false" >> $GITHUB_OUTPUT
          exit 0
        fi

    - name: Check if release should proceed
      if: steps.version.outputs.should_release == 'false'
      run: |
        echo "Skipping release - no version tag found"
        exit 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install .
        pip install -e .[dev]

    - name: Run tests
      run: |
        pytest --cov=pycoupler --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check code formatting with Black
      run: |
        black --check .

    - name: Lint code with Flake8
      run: |
        flake8 .

    - name: Build package
      run: |
        python -m build

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl

    - name: Display release info
      run: |
        echo "üöÄ Releasing version: ${{ steps.version.outputs.version }}"
        echo "üì¶ Tag name: ${{ steps.version.outputs.tag_name }}"
        echo "üè∑Ô∏è  Is tag push: ${{ steps.version.outputs.is_tag_push }}"

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release of version ${{ steps.version.outputs.version }}
        body: |
          Changes in this Release
          - Automated release notes
        draft: false
        prerelease: false
        files: dist/*
