name: release

on:
  push:
    tags: ['v*']

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
        fetch-tags: true  # Ensure all tags are fetched for version resolution

    - name: Check if tag is on main/master branch
      id: check
      run: |
        # Get the commit that the tag points to
        TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
        echo "Tag ${{ github.ref_name }} points to commit: $TAG_COMMIT"
        
        # Check if this commit is reachable from main or master
        if git branch -r --contains $TAG_COMMIT | grep -E "(origin/main|origin/master)" > /dev/null; then
          echo "✅ Tag ${{ github.ref_name }} is on main/master branch"
          echo "should-release=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️  Tag ${{ github.ref_name }} is NOT on main/master branch"
          echo "Available branches containing this commit:"
          git branch -r --contains $TAG_COMMIT
          echo "This release will be skipped for security reasons."
          echo "To release, merge your changes to main/master first, then tag from there."
          echo "should-release=false" >> $GITHUB_OUTPUT
        fi

  release:
    needs: check-tag
    if: needs.check-tag.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
        fetch-tags: true  # Ensure all tags are fetched for version resolution

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install .
        pip install -e .[dev]

    - name: Run tests
      run: |
        pytest --cov=pycoupler --cov-report=xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check code formatting with Black
      run: |
        black --check .

    - name: Lint code with Flake8
      run: |
        flake8 .

    - name: Build package
      run: |
        python -m build

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl

    - name: Extract version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release of version ${{ steps.get_version.outputs.version }}
        body: |
          Changes in this Release
          - Automated release notes
        draft: false
        prerelease: false
        files: dist/*
